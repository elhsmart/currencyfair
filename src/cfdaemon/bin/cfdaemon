#!/usr/bin/php -q
<?php

    use Pheanstalk\Pheanstalk;

    require_once __DIR__ . '/../vendor/autoload.php';
    require_once __DIR__ . "/../src/common.php";

    if(!is_file(__DIR__ . '/../conf/' . $config_file)) {
        System_Daemon::log(System_Daemon::LOG_CRIT, "Cannot find cfdaemon.ini");
        die(1);
    }

    $config = parse_ini_file(__DIR__ . '/../conf/' . $config_file, true);

    if(!$config) {
        System_Daemon::log(System_Daemon::LOG_CRIT, "Cannot parse cfdaemon.ini");
        die(1);
    }

    System_Daemon::start();

    System_Daemon::log(System_Daemon::LOG_INFO, "Daemon: '".
        System_Daemon::getOption("appName").
        "' spawned! This will be written to ".
        System_Daemon::getOption("logLocation"));

    $pheanstalk = new Pheanstalk($config['beanstalkd']['host'], $config['beanstalkd']['port']);

    while(true) {
        $job = $pheanstalk
          ->watch($config['beanstalkd']['cfdaemon_tube'])
          ->ignore('default')
          ->reserve($config['beanstalkd']['timeout']);

        if($job) {
            $data = $job->getData();

            if(!is_json($data) || strlen($data) == 0) {
                System_Daemon::log(System_Daemon::LOG_ERR, "Task data is not JSON");
                $pheanstalk->delete($job);
                continue;
            }

            System_Daemon::log(System_Daemon::LOG_INFO, "New job received: " . $data);
            $data = json_decode($data);

            // Here we go with message processing. DB first.
            try {
                $db = new PDO('mysql:host=' . $config['mysql']['host'] . ';dbname=' . $config['mysql']['db'],
                $config['mysql']['user'],
                $config['mysql']['pass'],
                    array(
                        PDO::ATTR_PERSISTENT => true
                    )
                );

                $sql = "INSERT INTO trades (
                    user_id,
                    currency_from,
                    currency_to,
                    amount_sell,
                    amount_buy,
                    rate,
                    time_placed,
                    originating_country
                ) values (
                    :userId,
                    :currencyFrom,
                    :currencyTo,
                    :amountSell,
                    :amountBuy,
                    :rate,
                    :timePlaced,
                    :originatingCountry
                )";

                $stmt = $db->prepare($sql);

                $stmt->bindParam(':userId', $data->userId, PDO::PARAM_INT);
                $stmt->bindParam(':currencyFrom', $data->currencyFrom, PDO::PARAM_STR);
                $stmt->bindParam(':currencyTo', $data->currencyTo, PDO::PARAM_STR);
                $stmt->bindParam(':amountSell', $data->amountSell, PDO::PARAM_STR);
                $stmt->bindParam(':amountBuy', $data->amountBuy, PDO::PARAM_STR);
                $stmt->bindParam(':rate', $data->rate, PDO::PARAM_STR);
                $stmt->bindParam(':timePlaced', date("Y-m-d H:i:s", strtotime($data->timePlaced)), PDO::PARAM_STR);
                $stmt->bindParam(':originatingCountry', $data->originatingCountry, PDO::PARAM_STR);

                $stmt->execute();

            } catch (PDOException $e) {
                System_Daemon::log(System_Daemon::LOG_ERR, "MySQL connection problems. Do not drop the job and wait.");
                System_Daemon::log(System_Daemon::LOG_ERR, "MySQL message: " . $e->getMessage());
                sleep(1);
                continue;
            }

            //And quick pass through memcache to display fresh "trends" for countries

            $MC = new Memcache;
            $MC->connect($config['memcache']['host'], $config['memcache']['port']);

            $country = $MC->get($data->originatingCountry);
            System_Daemon::log(System_Daemon::LOG_INFO, "MC message: " . $country);

            if(empty($country)) {
                $country = new stdClass;
            } else {
                $country = json_decode($country);
            }

            $country->tradesCount += 1;

            if(!isset($country->topPairs)) {
                $country->topPairs = array();
            } else {
                $country->topPairs = (array)$country->topPairs;
            }

            //Keep our counts safe even trade was in reverse way
            $pair = $data->currencyFrom . "/" . $data->currencyTo;
            $pairReverse = $data->currencyTo . "/" . $data->currencyFrom;
            $usedPair = $pair;

            if(isset($country->topPairs[$pairReverse])) {
                $usedPair = $pairReverse;
            }

            $country->topPairs[$usedPair] += 1;

            $MC->set($data->originatingCountry, json_encode($country));
            $MC->close();

            //pass job to the wssocket through beanstalkd
            $pheanstalk
                ->useTube($config['beanstalkd']['cfsocket_tube'])
                ->put($job->getData());

            $pheanstalk->delete($job);
        }

        System_Daemon::log(System_Daemon::LOG_INFO, "Loop ended");
    }